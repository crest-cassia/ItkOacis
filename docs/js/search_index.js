var search_data = {"index":{"searchIndex":["fooconductor","itkoacis","conductor","conductorcombine","conductorrandom","conductorsimplega","hoststub","paramsetstub","simulatorstub","itktest","alternategeneration()","alternategeneration_crossover()","alternategeneration_mutate()","alternategeneration_survive()","checkrunstatus()","checkrunning()","collectrunstatus()","compare?()","convertscatterpolicy()","countrunstatus()","createandrun()","createps()","createps()","createpsandrun()","createruns()","cycle()","cyclebody()","cyclebody()","dowithnthrun()","done?()","eachdoneparamset()","eachhost()","eachps()","eachrun()","eachrun()","eachrunningparamset()","failed?()","fillrunningparamsetlist()","finished?()","genparamsethash()","gethostandgroupbyname()","gethostandgroupnamelist()","gethostbyname()","gethostgroupbyname()","gethostgroupnamelist()","gethostlistingroup()","gethostnamelist()","gethostnamelistingroup()","gethostparamtable()","getinput()","getinputtable()","getnofinitparamset()","getnofinitparamset()","getnofinitparamset()","getparamdef()","getparamdeflist()","getresult()","getresulttable()","getsimulatorbyname()","getsimulatornamelist()","getvaluebypolicy()","ishost()","ishostgroup()","logging()","maxjobn()","new()","new()","new()","new()","newparamset()","newseedbycrossover()","newseedbymutate()","nofdone()","nofrunning()","nofruns()","nofrunsinnth()","nthrun()","prepareproc()","run()","runfinal()","runinit()","runparamset()","scoreof()","setentitybyname()","setentitybyname()","sethost()","setsimulator()","setup()","setup()","setup()","setup()","setupgapolicy()","setuplogger()","setuploggerbody()","setupnewparam()","setupnewparam()","setupnewparam()","setupparamlisttable()","setupscatterpolicy()","shiftindex()","spawnparamset()","spawnparamset()","spawnparamsetn()","sync()","sync()","syncall()","syncall()","syncallps()","syncallrun()","terminate?()","terminate?()","tojson()"],"longSearchIndex":["fooconductor","itkoacis","itkoacis::conductor","itkoacis::conductorcombine","itkoacis::conductorrandom","itkoacis::conductorsimplega","itkoacis::hoststub","itkoacis::paramsetstub","itkoacis::simulatorstub","itktest","itkoacis::conductorsimplega#alternategeneration()","itkoacis::conductorsimplega#alternategeneration_crossover()","itkoacis::conductorsimplega#alternategeneration_mutate()","itkoacis::conductorsimplega#alternategeneration_survive()","itkoacis::paramsetstub#checkrunstatus()","itkoacis::conductor#checkrunning()","itkoacis::paramsetstub#collectrunstatus()","itkoacis::conductorsimplega#compare?()","itkoacis::conductorrandom#convertscatterpolicy()","itkoacis::paramsetstub#countrunstatus()","itkoacis::paramsetstub#createandrun()","itkoacis::conductor#createps()","itkoacis::simulatorstub#createps()","itkoacis::simulatorstub#createpsandrun()","itkoacis::hoststub#createruns()","itkoacis::conductor#cycle()","itkoacis::conductor#cyclebody()","itkoacis::conductorsimplega#cyclebody()","itkoacis::paramsetstub#dowithnthrun()","itkoacis::paramsetstub#done?()","itkoacis::conductor#eachdoneparamset()","itkoacis::hoststub#eachhost()","itkoacis::simulatorstub#eachps()","itkoacis::paramsetstub#eachrun()","itkoacis::simulatorstub#eachrun()","itkoacis::conductor#eachrunningparamset()","itkoacis::paramsetstub#failed?()","itkoacis::conductor#fillrunningparamsetlist()","itkoacis::paramsetstub#finished?()","itkoacis::simulatorstub#genparamsethash()","itkoacis::hoststub::gethostandgroupbyname()","itkoacis::hoststub::gethostandgroupnamelist()","itkoacis::hoststub::gethostbyname()","itkoacis::hoststub::gethostgroupbyname()","itkoacis::hoststub::gethostgroupnamelist()","itkoacis::hoststub::gethostlistingroup()","itkoacis::hoststub::gethostnamelist()","itkoacis::hoststub::gethostnamelistingroup()","itkoacis::hoststub#gethostparamtable()","itkoacis::paramsetstub#getinput()","itkoacis::paramsetstub#getinputtable()","itkoacis::conductor#getnofinitparamset()","itkoacis::conductorcombine#getnofinitparamset()","itkoacis::conductorsimplega#getnofinitparamset()","itkoacis::simulatorstub#getparamdef()","itkoacis::simulatorstub#getparamdeflist()","itkoacis::paramsetstub#getresult()","itkoacis::paramsetstub#getresulttable()","itkoacis::simulatorstub::getsimulatorbyname()","itkoacis::simulatorstub::getsimulatornamelist()","itkoacis::conductorrandom#getvaluebypolicy()","itkoacis::hoststub#ishost()","itkoacis::hoststub#ishostgroup()","itkoacis::conductor#logging()","itkoacis::hoststub#maxjobn()","itkoacis::conductor::new()","itkoacis::hoststub::new()","itkoacis::paramsetstub::new()","itkoacis::simulatorstub::new()","itkoacis::conductor#newparamset()","itkoacis::conductorsimplega#newseedbycrossover()","itkoacis::conductorsimplega#newseedbymutate()","itkoacis::conductor#nofdone()","itkoacis::conductor#nofrunning()","itkoacis::paramsetstub#nofruns()","itkoacis::paramsetstub#nofrunsinnth()","itkoacis::paramsetstub#nthrun()","itkoacis::conductorsimplega#prepareproc()","itkoacis::conductor#run()","itkoacis::conductor#runfinal()","itkoacis::conductor#runinit()","itkoacis::conductor#runparamset()","itkoacis::conductorsimplega#scoreof()","itkoacis::hoststub#setentitybyname()","itkoacis::simulatorstub#setentitybyname()","itkoacis::conductor#sethost()","itkoacis::conductor#setsimulator()","itkoacis::conductor#setup()","itkoacis::conductorcombine#setup()","itkoacis::conductorrandom#setup()","itkoacis::conductorsimplega#setup()","itkoacis::conductorsimplega#setupgapolicy()","itkoacis::conductor#setuplogger()","itkoacis::conductor#setuploggerbody()","itkoacis::conductor#setupnewparam()","itkoacis::conductorcombine#setupnewparam()","itkoacis::conductorrandom#setupnewparam()","itkoacis::conductorcombine#setupparamlisttable()","itkoacis::conductorrandom#setupscatterpolicy()","itkoacis::conductorcombine#shiftindex()","itkoacis::conductor#spawnparamset()","itkoacis::conductorsimplega#spawnparamset()","itkoacis::conductor#spawnparamsetn()","itkoacis::paramsetstub#sync()","itkoacis::simulatorstub#sync()","itkoacis::conductor#syncall()","itkoacis::simulatorstub#syncall()","itkoacis::simulatorstub#syncallps()","itkoacis::simulatorstub#syncallrun()","itkoacis::conductor#terminate?()","itkoacis::conductorsimplega#terminate?()","itkoacis::paramsetstub#tojson()"],"info":[["FooConductor","","FooConductor.html","",""],["ItkOacis","","ItkOacis.html","","<p>Itk&#39;s Oacis Utilities\n<p>Author:: Itsuki Noda noda50@gmail.com\n<p>Copyright:: Copyright © 2020 AIST &amp; …\n"],["ItkOacis::Conductor","","ItkOacis/Conductor.html","","<p>to control functionarities of OACIS via Oacis Watcher facility.\n<p>Usage\n\n<pre>class FooConductor &lt; ItkOacis::Conductor ...</pre>\n"],["ItkOacis::ConductorCombine","","ItkOacis/ConductorCombine.html","","<p>Conductor that manages to create new ParamSetStub by exploring whole combination. Lists of values for …\n"],["ItkOacis::ConductorRandom","","ItkOacis/ConductorRandom.html","","<p>Conductor that manages to create new ParamSetStub for random-search. A policy to scatter ParamSets can …\n"],["ItkOacis::ConductorSimpleGa","","ItkOacis/ConductorSimpleGa.html","","<p>Conductor that manages to ParamSet according to a simple GA (Genetic Algorithm) way.\n<p>At the initialization, …\n"],["ItkOacis::HostStub","","ItkOacis/HostStub.html","","<p>to provide interface for Host and HostGroup in Oacis from ItkOacis\n"],["ItkOacis::ParamSetStub","","ItkOacis/ParamSetStub.html","","<p>Stub of ParameterSet\n"],["ItkOacis::SimulatorStub","","ItkOacis/SimulatorStub.html","","<p>to use Simulator in Oacis from ItkOacis Conductor\n"],["ItkTest","","ItkTest.html","",""],["alternateGeneration","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-alternateGeneration","()","<p>to alternate generation It can be overrided by expanded classes.\n"],["alternateGeneration_CrossOver","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-alternateGeneration_CrossOver","()","<p>to alternate generation (cross over)\n"],["alternateGeneration_Mutate","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-alternateGeneration_Mutate","()","<p>to alternate generation (mutate)\n"],["alternateGeneration_Survive","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-alternateGeneration_Survive","()","<p>to alternate generation (survive)\n"],["checkRunStatus","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-checkRunStatus","(_reference, _syncP = false, _nth = :all, _mode = :and)","<p>check all runs specified by <em>nth</em> are in a certain status.\n<p><em>syncP</em> &mdash; if true, sync to Oacis DB.\n<p><em>nth</em>  &mdash; an Integer …\n"],["checkRunning","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-checkRunning","()","<p>to update all status. If some ParamSets are done, they move from @runningParamSetList to @doneParamSetList. …\n"],["collectRunStatus","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-collectRunStatus","(_syncP = false, _nth = :all)","<p>check run status\n<p><em>syncP</em> &mdash; if true, sync to Oacis DB.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or :all.\n"],["compare?","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-compare-3F","(_psStub0, _psStub1)","<p>to compare two ParamSetStub.\n<p><em>psStub0</em>, <em>psStub1</em>  &mdash; ParamSetStub to compare.\n<p><strong>return</strong>  &mdash; -1 if scoreOf(_psStub0) …\n"],["convertScatterPolicy","ItkOacis::ConductorRandom","ItkOacis/ConductorRandom.html#method-i-convertScatterPolicy","(_policyTable)","<p>to convert scatter policy from <em>conf</em> definition to random generator.\n<p><em>policyTable</em> &mdash; a Hash from param. name …\n\n"],["countRunStatus","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-countRunStatus","(_reference, _syncP = false, _nth = :all)","<p>check run status to be a <em>status</em>.\n<p><em>targettype</em> &mdash; one of :finished, :failed, :running…\n<p><em>syncP</em> &mdash; if true, sync …\n"],["createAndRun","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-createAndRun","(_seedParam, _conductor, _nofRun)","<p>create PS and Run\n<p><em>seedParam</em> &mdash; parameters in a Hash.\n<p><em>conductor</em> &mdash; a Conductor.\n"],["createPs","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-createPs","(_param)","<p>to create PS.\n<p><em>param</em> &mdash; a Hash of a parameter set. Can be partial.\n<p><strong>return</strong> &mdash; a Ps.\n"],["createPs","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-createPs","(_param)","<p>generate param. set (Ps).\n<p><em>param</em> &mdash; parameter set. Should be a Hash. Can be partial.\n<p><strong>return</strong> &mdash; parameter set (Ps) …\n"],["createPsAndRun","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-createPsAndRun","(_param, _host, _nofRun = 1)","<p>generate param. set and run.\n<p><em>param</em> &mdash; parameter set. should be a Hash.\n<p><em>host</em> &mdash; a HostStub to run.\n"],["createRuns","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-createRuns","(_paramSet, _nofRun = 1)","<p>to (find or) create runs with param.\n<p><em>paramSet</em>  &mdash; a Ps or ParamSetStub.\n<p><em>nofRun</em>  &mdash; total number of runs.\n"],["cycle","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-cycle","()","<p>to check status as a cycle. In default, update status. It can be overrided by expanded classes.\n"],["cycleBody","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-cycleBody","()","<p>to execute body operation for a cycle just after checkRunning() ; In default, do nothing. It can be overrided …\n"],["cycleBody","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-cycleBody","()","<p>to check a generation is over and alternate generation. It can be overrided by expanded classes.\n"],["doWithNthRun","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-doWithNthRun","(_nth, &_block)","<p>call block for the nth run.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or :all.\n<p><em>block</em> &mdash; a block to call.\n"],["done?","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-done-3F","(_syncP = false, _nth = :all, _mode = :and)","<p>check run status\n<p><em>syncP</em> &mdash; if true, sync to Oacis DB.\n<p><strong>return</strong> &mdash; run status\n"],["eachDoneParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-eachDoneParamSet","()","<p>to call block for each done ParamSet.\n<p><em>block</em> &mdash; a procedure to call with each done ParamSet.\n\n"],["eachHost","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-eachHost","(&_block)","<p>to call <em>block</em> for each Host entity. If <code>self</code> is Host, just call <em>block</em> with the <code>entity</code>. If <code>self</code> is HostGroup …\n"],["eachPs","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-eachPs","(&body)","<p>run body script for each parameter.\n<p><em>body</em> &mdash; script to run.  Each param set is passed as an argument.\n\n"],["eachRun","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-eachRun","(&_block)","<p>call block for each run.\n<p><em>block</em> &mdash; a block to call.\n\n"],["eachRun","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-eachRun","(&body)","<p>run body script for each run.\n<p><em>body</em> &mdash; script to run.  Each run is passed as an argument.\n\n"],["eachRunningParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-eachRunningParamSet","()","<p>to call block for each running ParamSet.\n<p><em>block</em> &mdash; a procedure to call with each running ParamSet.\n\n"],["failed?","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-failed-3F","(_syncP = false, _nth = :all, _mode = :and)","<p>check run status\n<p><em>syncP</em> &mdash; if true, sync to Oacis DB.\n<p><em>mode</em>  &mdash; :and or :or.\n"],["fillRunningParamSetList","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-fillRunningParamSetList","(_max = nil, _paramSeed = nil)","<p>to spawn multiple ParamSetStub to fill a running list. If <em>block</em> is given, <em>paramSeed</em> is modified as described …\n"],["finished?","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-finished-3F","(_syncP = false, _nth = :all, _mode = :and)","<p>check all runs specified by <em>nth</em> are finished.\n<p><em>syncP</em> &mdash; if true, sync to Oacis DB.\n<p><em>nth</em>  &mdash; an Integer or :first …\n"],["genParamSetHash","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-genParamSetHash","(_param = {})","<p>to generate default ParamSet Hash.\n<p><em>param</em>  &mdash; a partial Hash of ParamSet.\n<p><strong>return</strong> &mdash; a Hash of ParamSet.\n"],["getHostAndGroupByName","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostAndGroupByName","(_name, _safeP = false)","<p>to get Host or HostGroup entry by name.\n<p><em>name</em> &mdash; the name of Host or HostGroup in String.\n<p><em>safeP</em> &mdash; If false, it …\n"],["getHostAndGroupNameList","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostAndGroupNameList","()","<p>to get Host and HostGroup name list.\n<p><strong>return</strong> &mdash; an Array of names of registered Host and HostGroup in String …\n\n"],["getHostByName","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostByName","(_name, _safeP = false)","<p>to get Host entry by name.\n<p><em>name</em> &mdash; the name of Host in String.\n<p><em>safeP</em> &mdash; If false, it raises an exception when …\n"],["getHostGroupByName","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostGroupByName","(_name, _safeP = false)","<p>to get HostGroup entry by name.\n<p><em>name</em> &mdash; the name of HostGroup in String.\n<p><em>safeP</em> &mdash; If false, it raises an exception …\n"],["getHostGroupNameList","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostGroupNameList","()","<p>to get HostGroup name list.\n<p><strong>return</strong> &mdash; an Array of names of registered HostGroup in String.\n\n"],["getHostListInGroup","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostListInGroup","(_name, _safeP = false)","<p>to get Host list in HostGroup by name.\n<p><em>name</em> &mdash; the name of HostGroup in String.\n<p><em>safeP</em> &mdash; If false, it raises …\n"],["getHostNameList","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostNameList","()","<p>to get Host name list.\n<p><strong>return</strong> &mdash; an Array of names of registered Host in String.\n\n"],["getHostNameListInGroup","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-getHostNameListInGroup","(_name, _safeP = false)","<p>to get Host name list in HostGroup by name.\n<p><em>name</em> &mdash; the name of HostGroup in String.\n<p><em>safeP</em> &mdash; If false, it raises …\n"],["getHostParamTable","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-getHostParamTable","()","<p>to retrieve Host&#39;s default parameters.\n<p><strong>return</strong> &mdash; the default parameters if this is a Host. If HostGroup …\n\n"],["getInput","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-getInput","(_name)","<p>get input value by name in hash.\n<p><strong>return</strong> &mdash; result value\n\n"],["getInputTable","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-getInputTable","()","<p>get input table in hash.\n<p><strong>return</strong> &mdash; input hash.\n\n"],["getNofInitParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-getNofInitParamSet","()","<p>to get the number of initial ParamSet. If <code>:nofInitParamSet</code> is specified in <em>conf</em> in new(), its value is …\n"],["getNofInitParamSet","ItkOacis::ConductorCombine","ItkOacis/ConductorCombine.html#method-i-getNofInitParamSet","()","<p>to get the number of initial ParamSet. Use @maxCombination for this Conductor class.\n<p><strong>return</strong> &mdash; the number …\n\n"],["getNofInitParamSet","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-getNofInitParamSet","()","<p>to get the number of initial ParamSet. It just return @population.\n<p><strong>return</strong> &mdash; the number of ParamSet.\n\n"],["getParamDef","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-getParamDef","(_name)","<p>to get the parameter definitions specified by <em>name</em>. If there are no <em>named</em> parameter, raise an exception. …\n"],["getParamDefList","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-getParamDefList","()","<p>to get the list of parameter definitions.\n<p><strong>return</strong> &mdash; an Array of ParameterDefinition.\n\n"],["getResult","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-getResult","(_name, _nth = :all, _sync = false)","<p>get result by name in hash.\n<p><em>name</em> &mdash; the name of result data.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or :all or …\n"],["getResultTable","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-getResultTable","(_nth = :all, _sync = false)","<p>get result table in hash.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or :all or :average or :stat.\n<p><em>syncP</em> &mdash; if true, …\n"],["getSimulatorByName","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-c-getSimulatorByName","(_name, _safeP = false)","<p>to get simulator entry by name.\n<p><em>name</em> &mdash; the name of simulator in String.\n<p><em>safeP</em> &mdash; If false, it raises an exception …\n"],["getSimulatorNameList","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-c-getSimulatorNameList","()","<p>to get simulator name list.\n<p><strong>return</strong> &mdash; an Array of names of registered simulators in String.\n\n"],["getValueByPolicy","ItkOacis::ConductorRandom","ItkOacis/ConductorRandom.html#method-i-getValueByPolicy","(_policy)","<p>to generate a random value specifyed in <em>policy</em>.\n<p><em>policy</em> &mdash; a Hash of overriding parameters. \n<p><strong>return</strong> &mdash; a random …\n"],["isHost","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-isHost","()","<p>to check the entity is a Host.\n<p><strong>return</strong> &mdash; true if the entity is a Host.\n\n"],["isHostGroup","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-isHostGroup","()","<p>to check the entity is a HostGroup.\n<p><strong>return</strong> &mdash; true if the entity is a HostGroup.\n\n"],["logging","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-logging","(_level, *_message)","<p>to logging information.\n<p><em>level</em> &mdash; log level.\n<p><em>message</em> &mdash; \n"],["maxJobN","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-maxJobN","()","<p>to get the maximum number of jobs that can be executed in parallel.\n<p><strong>return</strong> &mdash; the maximum number of parallel …\n\n"],["new","ItkOacis::Conductor","ItkOacis/Conductor.html#method-c-new","(_conf = {})","<p>initialize an instance.\n<p><em>conf</em> &mdash; configulation for the initialization. This override DefaultConf.\n\n"],["new","ItkOacis::HostStub","ItkOacis/HostStub.html#method-c-new","(_name = nil, _conf = {})","<p>initialize.\n<p><em>name</em> &mdash; name of Simulator in Oacis.\n\n"],["new","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-c-new","(_seedParam, _conductor, _nofRun)","<p>initialize\n<p><em>seedParam</em> &mdash; seed of parameters in a Hash.\n<p><em>conductor</em> &mdash; a Conductor.\n"],["new","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-c-new","(_name = nil)","<p>initialize.\n<p><em>name</em> &mdash; name of Simulator in Oacis.\n\n"],["newParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-newParamSet","(_varied = @defaultVariedParam, _nofRun = @nofRun)","<p>to create ParamSetStub. Can be override.\n<p><em>varied</em> &mdash; a paried information to generate ParamSet.\n<p><em>nofRun</em> &mdash; number …\n"],["newSeedByCrossOver","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-newSeedByCrossOver","(_parent0, _parent1)","<p>to generate a new seed of ParamSet in cross-over. It can be overrided in sub-classes.\n"],["newSeedByMutate","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-newSeedByMutate","(_parent)","<p>to generate a new seed of ParamSet in mutation. It can be overrided in sub-classes.\n"],["nofDone","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-nofDone","()","<p>to get number of done ParamSet.\n<p><strong>return</strong> &mdash; the number of ParamSet in @doneParamSetList.\n\n"],["nofRunning","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-nofRunning","()","<p>to get number of running ParamSet.\n<p><strong>return</strong> &mdash; the number of ParamSet in @runningParamSetList.\n\n"],["nofRuns","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-nofRuns","()","<p>get number of runs.\n<p><strong>return</strong>  &mdash; a number of runs.\n\n"],["nofRunsInNth","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-nofRunsInNth","(_nth)","<p>get number of runs specified by _nth ;\n<p><strong>return</strong>  &mdash; a number of runs.\n\n"],["nthRun","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-nthRun","(_nth)","<p>get Nth run.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or a Run.\n<p><strong>return</strong>  &mdash; a Run.\n"],["prepareProc","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-prepareProc","(_procSpec)","<p>to prepare procedure.\n<p><em>procSpec</em>  &mdash; a Proc or a Symbol. If a Symbol, it should be the name of an instance …\n"],["run","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-run","()","<p>run loop\n"],["runFinal","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-runFinal","()","<p>to finalize run process. In default, do nothing. It can be overrided by expanded classes.\n"],["runInit","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-runInit","()","<p>to generate initial set of ParamSets. In fillRunningParamSetList(), the size of initial set equals to …\n"],["runParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-runParamSet","(_psStub, _nofRun)","<p>to run ParamSetStub on Host.\n<p><em>psStub</em> &mdash; a ParamSetStub.\n<p><em>nofRun</em> &mdash; number of runs.\n"],["scoreOf","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-scoreOf","(_psStub)","<p>to calculate scalar score of a given ParamSetStub. By default everyone is the same.\n"],["setEntityByName","ItkOacis::HostStub","ItkOacis/HostStub.html#method-i-setEntityByName","(_name = @name, _safeP = false)","<p>to get Simulator entity from Oacis.\n<p><em>name</em> &mdash; name of Simulator.\n<p><em>safeP</em> &mdash; If false, it raises an exception when …\n"],["setEntityByName","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-setEntityByName","(_name)","<p>to get Simulator entity from Oacis. It raises an exception if the name is not found in the registory. …\n"],["setHost","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setHost","(_hostName, _hostParam = nil)","<p>to set HostStub by name.\n<p><em>hostName</em> &mdash; the name of Host or HostGroup.\n<p><em>hostParam</em> &mdash; a Hash of the parameters for …\n"],["setSimulator","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setSimulator","(_simName)","<p>to set SimulatorStub by name.\n<p><em>simName</em> &mdash; the name of simulator.\n<p><strong>return</strong> &mdash; the SimulatorStub.\n"],["setup","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setup","()","<p>to setup configulations.\n"],["setup","ItkOacis::ConductorCombine","ItkOacis/ConductorCombine.html#method-i-setup","()","<p>to setup configulations.\n"],["setup","ItkOacis::ConductorRandom","ItkOacis/ConductorRandom.html#method-i-setup","()","<p>to setup configulations.\n"],["setup","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-setup","()","<p>to setup configulations.\n"],["setupGaPolicy","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-setupGaPolicy","()","<p>to set policies of genetic algorithm.\n"],["setupLogger","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setupLogger","()","<p>to setup @loggerList. The value of <code>:logger</code> in <em>spec</em> in run() specifies  the type of logging device as …\n"],["setupLoggerBody","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setupLoggerBody","(_loggerSpec)","<p>to setup @loggerList (body).\n<p><em>loggerSpec</em> &mdash; a specification of the Logger.\n<p><strong>return</strong> &mdash; an Array of Logger.\n"],["setupNewParam","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-setupNewParam","(_varied)","<p>to setup ParamSet setting for new one. As a default, just return _seed. Can be override.\n<p><em>varied</em> &mdash; a paried …\n"],["setupNewParam","ItkOacis::ConductorCombine","ItkOacis/ConductorCombine.html#method-i-setupNewParam","(_seed)","<p>to setup ParamSet setting for new one. It generates a partial _paramSet hash by picking up each combination …\n"],["setupNewParam","ItkOacis::ConductorRandom","ItkOacis/ConductorRandom.html#method-i-setupNewParam","(_varied)","<p>to setup ParamSet setting for new one. It generate a partial _paramSet hash according to a specified …\n"],["setupParamListTable","ItkOacis::ConductorCombine","ItkOacis/ConductorCombine.html#method-i-setupParamListTable","(_paramListTable)","<p>to set palameter list policy.\n<p><em>policyTable</em> &mdash; a Hash from param. name to scatter policy.\n\n"],["setupScatterPolicy","ItkOacis::ConductorRandom","ItkOacis/ConductorRandom.html#method-i-setupScatterPolicy","(_policyTable)","<p>to set scatter policy.\n<p><em>policyTable</em> &mdash; a Hash from param. name to scatter policy.\n\n"],["shiftIndex","ItkOacis::ConductorCombine","ItkOacis/ConductorCombine.html#method-i-shiftIndex","(_paramListIndex, _k)","<p>to shift indexes in <em>paramListIndex</em>.\n<p><em>paramListIndex</em> &mdash; an Array of name-index tables.\n<p><em>k</em> &mdash; to focus <em>k</em>-th entry. …\n"],["spawnParamSet","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-spawnParamSet","(_paramSeed = nil)","<p>to spawn a ParamSetStub and push to a running list.\n<p><em>paramSeed</em> &mdash; a Hash of paramter set. Can be partial. …\n"],["spawnParamSet","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-spawnParamSet","(_paramSeed = nil)","<p>to spawn a ParamSetStub and push to a running list.\n<p><em>paramSeed</em> &mdash; a Hash of paramter set. Can be partial. …\n"],["spawnParamSetN","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-spawnParamSetN","(_n, _paramSeed = nil)","<p>to spawn <em>n</em> ParamSetStub and push to a running list. If <em>block</em> is given, it calls <em>block</em> with arguments …\n"],["sync","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-sync","(_nthRun = :all)","<p>sync status.\n<p><em>nth</em>  &mdash; an Integer or :first or :last or :all.\n\n"],["sync","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-sync","()","<p>sync simulator to DB in Oacis.\n"],["syncAll","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-syncAll","()","<p>to update all status.\n"],["syncAll","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-syncAll","()","<p>sync everything.\n"],["syncAllPs","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-syncAllPs","()","<p>sync PSs to DB in Oacis.\n"],["syncAllRun","ItkOacis::SimulatorStub","ItkOacis/SimulatorStub.html#method-i-syncAllRun","()","<p>sync runs to DB in Oacis.\n"],["terminate?","ItkOacis::Conductor","ItkOacis/Conductor.html#method-i-terminate-3F","()","<p>to check conditions to terminate run-loop. In default, output log. It can be overrided by expanded classes. …\n"],["terminate?","ItkOacis::ConductorSimpleGa","ItkOacis/ConductorSimpleGa.html#method-i-terminate-3F","()","<p>to check the alter count reaches @nofAlternation.\n<p><strong>return</strong> &mdash; true when the conditions to terminate are satisfied. …\n\n"],["toJson","ItkOacis::ParamSetStub","ItkOacis/ParamSetStub.html#method-i-toJson","(_mode = nil, _runs = :all)","<p>generate JSON object for log.\n<p><em>mode</em> &mdash; mode of the conversion.\n<p><em>runs</em> &mdash; specify which runs include. If :all, return …\n"]]}}